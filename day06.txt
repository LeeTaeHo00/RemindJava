0. 복습 -> 연산자 -> 제어문(조건문)

1) JAVA
	1995년 공식 발표
	sun마이크로 시스템사 제임스 고슬링팀 개발
	
	객체 지향 언어
	플랫폼 독립성 (JVM)
	자동 메모리 관리

2) 변수
	하나의 자료형, 하나의 값을 저장하는 저장공간
	자료형 변수명 = 값; 저장공간을 선언하고 그 공간에 값을 넣어 초기화한다.\

3) 입출력 메소드
	출력
	printf(서식지정자 사용)
	print(줄넘김 없음)
	println(줄넘김 있음)

	입력메소드
	입력클래스가 반드시 필요하다.
	Scanner sc = new Scanner(System.in)
	스캐너 클래스  java.util.Scanner 패키지에 있는 것을 import 받아온다.
	.next()
	.nextLine()
	.nextInt();
	.nextDouble(); // println 이랑 f 로 출력해보기

4) 연산자 : 기능이 있는 특수문자
	최우선
	단항
	산술
	쉬프트
	관계
	논리
	삼항
	대입

5) 산술연산자
	+, -, *, /, %

6) 증감연산자
	단항연산자
	++, --
	전위 : 연산이 끝나기 전 증감이 적용됨
	후위 : 연산이 끝나고 증감이 적용됨

========================================================================================================

1. 관계 연산자 (비교 연산자)
	조건식	결과가 참 또는 거짓, 둘 중 하나가 나오는 식(boolean 타입으로 결과가 나온다)
	>, < 초과 미만, 해당 숫자가 포함안됨 
	>=, <= 이상 이하, 해당 숫자 포함됨 
	==, != 같다 다르다
	
	a > b  a가 b보다 큰가? True : False
	a < b  a가 b보다 작은가? True : False
	a >= b a가 b  보다 크거나 같니? True : False
	a == b a 가 b 랑 같니 ? 맞으면 true 틀리면 false
	a != b a 가 b 랑 다르니 ? 맞으면 true 틀리면 false

2. 논리 연산자
	and	: 두 조건식이 모두 참이면 참
	or	: 두 조건식이 하나라도 참이면 참
	not	: 조건식이 참이면 거짓으로, 거짓이면 참으로

	true && true (and) : true
	true || false (or) : true
	!true		(not) : false



3. 삼항 연산자 (?:)
	조건식 ? 차임ㄹ때 값 : 거짓일때 값
	삼항연산자의 결과는 값이다.
	변수에 저장할 수 있고 출력도 가능하다.

	거짓일 때의 값에 삼항연산자를 한 번 더 작성하면 삼항 연산자의 중첩으로 3개의 값을 출력할 수 있다.

4. 비트 연산자
1) 비트와 바이트의 개념
비트(bit) 
	정보의 최소 단위
	한 비트는 0, 1 두가지의 값만 표현할 수 있다. 
	ex) 스위치(on/off), 참 거짓

바이트(byte)
	8개의 비트를 묶어서 1byte
	ex) 영어문자 A -> 01000001 (1byte)

왜 비트 단위로 연산할까?
	고급언어 -> 컴퓨터 언어(저급언어)로 바꾸는 과정이 필요한데, 비트 단위로 연산을 사용하면 이 과정을 생략할 수 있다. => 연산속도 향상

2) 비튼연산자 :
Integer.toBinaryString
	AND(&) 논리곱 : 	두 비트가 모두 1이면 1
			아니면 0

	10 -> 1010
	11 -> 1011
		&======
		1010

	AND(|) 논리합 :	두 비트 중 하나라도 1이면 1

	10 -> 1010
	11 -> 1011
		|======
		1011

	XOR(^) 베타논리합 : 두비트가 서로 다르면 1
	10 -> 1010
	11 -> 1011
		^======
		0001
	
	NOT(~) 논리부정 : 비트가 0은 1로, 비트가 1이면 0으로
			부호비트 또한 반대로 바꿔줌(양수->음수, 음수->양수)
			~n => -(n + 1) **
			~10 = -(11)
	00001010	=> 10
	~--------------------
	00000101	=> 5로 예상했지만 -11로 나옴
	---------------------
	11110101	=> 이렇게 되기때문
	
	2의 보수 형식으로 음수를 표현
	 00001010
		1
	-----------
	10이라는 10진수는 2진수 1010이 된다(몫이 1일 때까지 2로 나눔ㄴ 된다)
	~1010	0101(2) 가 나올거라 예상했지만 결과는 -11일 나온다.
	(증명) 컴퓨터는 덧셈만 가능하기 때문에 뺄셈을 구현하려면 음수가 필요하다.
	비트는 가장 앞에 있는 비트를 최상위 비트라고 한다. 최상위 비트는 부호비트로 사용된다(0:양수, 1:음수)
	
	1010으로 쓴 양의 정수 10은 앞에 부호비트 01010인것
	~01010 => 부호비트가 1로 바뀌기 때문에 음수로 변환
	반전된 이진수 	: 11110101
	2의 보수		: 00001010
	+1		: 00001011

	십진수 10 -> 이진수 1010(2)
	십진수 11 -> 이진수(1011)

+) 1의 보수 : 이진수의 모든 비트를 반전시켜서 구한다(1 -> 0, 0 -> 1)
	음수를 표현하기 위해 사용되었지만 지금은 2의 보수가 더 많이 사용된다.
	
	양수 5 = > 0101
	1의 보수 => 1010
	음수 표현 : -x => x의 1의 보수
	0000 양수 0
	1111 음수 -0

+) 2의 보수 : 1의 보수 + 1로 계산된다.
	양수 5 => 0101
	1의 보수 => 1010
	2의 보수 => 1010 + 1 => 1011

	음수표현 -x => x의 2의 보수
	0은 유일한 형태로 존재 0000

3) 쉬프트 연산자(이동)
좌시프트 A << B : A의 비트를 왼쪽으로 B만큼 이동시킨다. 
	이동시킬때 만들어지는 칸은 0으로 채워지며, 
	한칸 이동하면 숫자가 2배 증가한다.
	지정된 비트수를 넘어가면 잘리게 된다.
	ex) 5 << 1 => 1010 이 되어 10이 된다.
	    5 << 2 => 010100 이 되어 20이 된다.


우쉬프트 A >> B : A의 비트를 오른쪽으로 B만큼 이동시키다.
	이동시킬때 만들어지는 칸은 맨 앞에 비트와 같게 채워진다.
	(왼쪽 빈칸은 부호비트에 따라 달라진다(양수 0으로 음수 1로 채워진다)
	이동 중 잘린 비트는 삭제됨
	이동 한칸에 2배씩 감소
	ex) 8 >> 1 => 0100이 되어 4가 된다.
	    8 >> 2 => 0010이 되어 2가 된다.



+) 암호화 복호화
	데이터를 안전하게 전송하거나 저장하기 위한 과정

1) 암호화
	원본 데이터를 변형하여 외부에서 알아보기 어려운 형태로 만드는 과정
	특정 알고리즘과 키를 사용하여 원본 데이터를 암호화
	결과로 나온 암호문은 원본 데이터와는 다른 형태의 데이터이며, 키를 알지 못하는 사람을 해독하기 어렵다.

2) 복호화
	암호화 된 데이터를 다시 원래의 형태로 되돌리는 과정
	암호화할 때 사용한 알고리즘과 동일한 키를 사용하여 암호화된 데이터를 해독
	복호화된 결과는 원본 데이터로 복원이 가능해짐

+) 대칭키와 비대칭키
1) 대칭키 : 대칭키 암호화는 하나의 키를 사용하여 데이터를 암호화하고 복호화하는 방법
	보내는 사람이 A라는 단어를 암호화하는데 :korean key를 사용했따면 보내는 사람과 받는 사람 모두 이 key를 소유해야 한다.
	대칭키 암호화는 속도가 빠르고 효율적이며 대부분의 일상적인 데이터 보호 작업에 사용한다.
	
2) 비대칭키 : 두 개의 서로 다른 키(공개키와 개인키)를 사용하여 데이터를 암호화하고 복호화 하는 방법
	공개키 : 누구나 알 수 있는 키
	개인키 : 소유자만 알고 있어야하는 비밀한 키
	데이터를 공개키로 암호화하면 개인키로만 복호화할 수 있고, 개인키로 암호된 데이터는 공개키로만 복호화할 수 있따.
	데이터의 안전한 전송과 디지털 서명에 사용

5. 제어문1
	프로그램의 흐름을 제어한다.
	
	조건문		조건식의 결과에 따라서 실행흐름을 결정한다.
			if		
			if else		
			if elseif else	
			switch		

	반복문		조건을 만족할 때 까지 실행 코드를 반본 실행한다.
			for
			while
			do~while

	기타제어문		흐름을 건너뛰거나 즉시 종료
			break
			continue

1) if 문
	조건식의 결과가 true이면 중괄호 영역 안으로 들어가서 문장을 실행하고 다음 코드를 순차적으로 실행한다.
	조건식의 결과가 false 면 중괄호 영역 안으로 들어가지 않고 다음 코드를 순차적으로 실행한다.

	형식
	if(조건식), 관계연산자, 논리 연산자, boolean TYPE
	{
		조건식이 참일때 실행할 문장;
	}
	이후 코드는 조건식이 true일때 실행할 문장 실행 후 순차적으로 실행된다.
			false일때 중괄호 실행하지 않고 순차적으로 실행된다.

2) if ~ else 문
	조건식의 결과가 true false 각각의 분기를 만들어서 해당 중괄호 영역안으로 들어가 문장을 실행한다.
	형식
	if(조건식) {
		조건식이 true일 때 실행문
	} else {
		조건식이 false일 때 실행문
	}

3) if ~ elseif ~ else
	조건식1의 결과가 true if문 중괄호 영여안의 문장 실행
	조건식1의 결과가 false 라면 else if문 조건식 2를 확인한다.
	조건식2의 결과가 true라면 else if문 중괄호 영역안의 문자 실행
	위의 조건식의 결과가 모두 false라면 else 문 중괄호 영역안의 문장 실행
	
* 문법
	if(조건식1){
		조건식1이 true 일 때 실행할 문장;
	} else if (조건식2) {
		조건식1이 false이고 조건식2 가 true일 때 실행할 문장;
	} else {
		조건식1과 조건식2의 결과가 false 일때 실행할 문장;
	}

- if문 : 조건문을 사용할 때 반드시 있어야 한다.
- else if문 : 확인해야 하는 조건식이 2개 이상일 경우 작성한다. 여러개가 있을 수 있다.
- else 문 : 위에 조건식이 모두 거짓일 때 실행할 문장을 작성한다.

※ if~if문, if~else if문
	if~if문은 모든 조건식을 확인한다.
	if~else if문은 if문의 조건식을 확인 한 뒤 true라면 아래 문장은 스킵한다.
	
	int num = 10;
	if(num == 10) 
	{
		syso(num);
	}
	if(num > 5)
	{
		syso(num이당);
	}
	이런식으로 코드가 짜여있을 경우
	첫번쨰 if문을 검사하여 실행한후 두번째 if문까지 확인을 하게 된다.

	int num = 10;
	if(num == 10) 
	{
		syso(num);
	}
	else if(num > 5)
	{
		syso(num이당);
	}
	이런식으로 코드가 짜여있을 경우
	첫번쨰 if문을 검사하여 실행한후 두번째 if문까지 확인을 하지 않는다.

※ if문의 중첩
	if문 안에 if문이 있는 것을 의미한다.
	if(조건식1){ 
		if(조건식2) { 
			... if(조건식 n) {}
		}
	}



4) switch문
	조건식의 값에 따라 여러 case 중 하나를 실행한다

	switch (변수명 or 값) {
		case 값1:
			실행문
			break;
		case 값2:
			실행문
			break;

		.
		.
		.

		default : 
			모두 만족하지 못했을때 실행문
			break;
	}

swithc문에서 사용가능 자료형 : 
	byte short int char string enum
사용불가 타입
	long, float, double, boolean
+) 삼항 연삱, if, switch 
- 삼항연사자 : 조건문이 1개만 있을 경우
- 논리가 있을겨우 if
- 하나의 변수에 여러개의 값이 있을수 있을경우 case에 값과 비교할 경우

클래스명 : SingTask01
코인 노래방 프로그램
1) 한 곡당 금액도 입력받기

금액입력 : 
곡 당 각격 입력 : 
[출력]
n 곡을 부를 수 있으며 잔돈은 n입니다

2) 잔돈이 부족할 경우 안내하기
금액 입력 : 
곡 당 가격 입력 : 
[출력]
입력한 금액은 100원 입니다. 곡 당 가격은 300원으로 200원이 부족하여 노래를부를 수 없습니다

SingTask02
3) 남은 금액으로 음료 구매 가능 여부 추가 (한곡당 금액 200원, 음료 금액은 100원) 음료는 한잔만
금액 입력 : 1000
[출력]
5곡을 부를 수 있으며 잔돈은 0원입니다.
음료를 마실경우 4곡을 부를 수 있으며 잔돈은 100원 입니다.

SingTask03
4) 총 부른 곡 수에 따른 보너스 곡 지급
5곡을 부를경우 1곡 추가 제공
 


















