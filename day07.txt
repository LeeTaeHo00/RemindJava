복습 -> 제어문2 -> 이중반복문
0. 복습

1)연산자 : 최(단)(산)쉬관리삼대
- 산술연산자
	정수 + 정수 = 정수
	정수 + 실수 = 실수
	실수 + 실수 = 실수

- 단항연산자 ++ 1식증가, --1식감소, +, -, ! 부정

- 쉬프트 연산자(비트)
	좌시프트 A << B 증가
	우쉬프트 A >> B 감소
	>>>(로지컬쉬프트) : 부호를 무시하고 0으로 채워줌 A >>> B, <<< 반대는 불가능

- 관계연산자
	<, >, <=, >=, ==, !=
	boolean형 결과

- 논리연산자 
	&&, ||, !
	&, |, ^, ~
	1010 & 1011 => 1010
	1010 | 1011 => 1011
	1010 ^ 1011 => 0001
	~1010		=> -11

- 삼함연산자
	조건식? 참 : 거짓

- 대입연산자

- 조건문
	if
	if~else
	if~elseif~else
	if(조건식1){조건식1이 참일때 실행문}
	else if(조건식2) {조건식1 거짓, 조건식2 참}
`	else {모든 조건식이 거짓일 때 실행문}
	
	switch (값)
	{
	case 값 : 
	실행문
	break;
	.
	.
	.
	case n :
	break;
	
	default :
	일치하는 값이 없을 경우 실행할 문장
	break;
	}
----------------------------------------------------

1. 반복문 : 특정 조건을 만족할 떄 까지 코드 블록을 반복 실행

1) for 문
	사용 : 반복 횟수가 정해져 있을 때 주로 사용
	
	문법 : 
		for(초기식; 조건식; 증감식)
		{
			조건식이 true일 경우 실행문
		}
	
		초기식 : 초기값, 처음에 설정할 값(변수) => int i = 0;
		조건식 : 결과가 논리형으로 나오는 식 => true라면 영역 안의 문장을 실행
			false 면 중괄호 영역을 들어가지 않고 for문 탈출
		증감식 : 값을 얼마나 증감할지 정하는 식 => ++, --
		


2) while 문
	조건식이 참인 동안 반복한다. 횟수가 정해져 있지 않으면 효율적
	실행 중에 조건식이 거짓이 되어야 무한 루프에 빠지지 않는다.

	조건식을 false로 만들어 줄수 있는 변수를 선언해줘야 한다.
	while ( 조건식) 	
	{
		참일때 실행할 문장
		조건식이 거짓이 될 수 있는 문장을 안에 작성
	}
	

3) do~while 문
	최소 한번은 실행하는 while문으로
	무조건 한번은 실행해야하는 상황에서 사용한다.

	do
	{
	실행문
	}while(조건식); // 기존 while 과는 달리 세미콜론(;) 필요하다.

----------------------------------------------------
2. 기타 제어문 : 반복문에서 주로 사용한다.
		단 break 문은 switch 에서 사용한다.
1) break
	즉시 해당 중괄호 영역을 탈출한다.
	break 문 아래 코드 아래 코드를 스킵한다(실행하지 않는다)

2) continue
	즉시 다음 반복으로 넘어간다.
	continue 문 아래 코드를 실행시키지 않는다.


----------------------------------------------------
언제나 로직구성
문자열 비교 => 비교할값.equals(비교값)

[살숩]
1. 한 개의 정수를 입력받아 짝수인지 홀수인지 출력하기(삼항 연산자 이용)

2. 한개의 정수를 입력받아 양수, 음수, 0인지 출력하기(조건문)

3. 나이를 입력받아서 다음 기준으로 출력하기
	0 ~ 12 : 어린이입니다.
	13 ~ 19 : 청소년입니다.
	20 이상 : 성인입니다.

	나이 입력 : 옆에 숫자쓰기
	현재 나이는 16살이고 청소년 입니다. [출력물]

4. 세 개의 정수를 입력받아 가장 작은 숫자부터 큰 숫자 순으로 정렬하여 출력하기
	단, 세 개의 정수는 모두 다른 숫자이어야 한다.
	숫자 3개 입력 : 5 1 9
	정렬된 숫자 : 9 5 1

5. 사용자가 문자열을 입력받고 "X" 만 입력했을 경우에만 종료 메시지 출력하고 그 외에는 입력한 문자열을 출력하기

-> 1 ~ 5 클래스명 : Review01



AtmTest
6. ATM 메뉴에서 입금, 출금, 잔액조회를 구현하기
	[조건]
	초기 잔액은 10000원으로 설정
	메뉴 선택에 따라 작업 수행
	종료시 프로그램 종료
	숫자(번호)로 입력받기
	String msg = "\nATM 기기의 메뉴 중 번호를 선택하세요 : "
		+ "\n1. 잔액조회 "
		+ "\n2. 입금 "
		+ "\n3. 출급 " 
		+ "\n4. 종료 "
		+ "\n선택 : ";
	그 외의 번호 입력시 다시 선택하세요 출력 후 메뉴 보이기

	번호 입력시 해당 메시지만 출력하고 종료


SingTest
7. 코인 노래방 시스템을 구현하는 개발자입니다.
사용자로부터 금액을 입력받아 부를 수 있는 곡 수와 잔돈을 계산하고, 음료를 마실 수 있는지 여부도 안내하는 프로그램

[요구사항]
사용자에게 곡 당 가격을 입력받는다.
반복문을 사용하여 사용자에게 금액을 계속 입력받는다.
단, 0을 입력하면 프로그램은 종료된다.
입력받은 금액으로 부를 수 있는 곡 수와 잔돈을 출력한다.
곡 수 : 금액 ÷ 곡당 가격
보너스 : 5곡당 1곡 보너스 (예: 5곡 → 6곡, 10곡 → 12곡)
잔돈 : 금액 % 곡당 가격
음료(100원)를 마시고 싶다면, 음료 가격을 차감하고 노래를 줄이는 방식으로 대체 제안을 출력한다.
사용자에게 "음료를 구매하시겠습니까?" 라고 묻고
YES를 입력하면 대체 결과를 출력 NO를 입력하면 원래 계산된 노래 수를 유지한다
금액이 부족할 경우, 노래를 부를 수 없다는 안내 메시지를 출력한다.

입력은 정수로 받되, nextLine()과 Integer.parseInt() 조합을 사용하여 입력 오류를 방지한다.
대소문자 구분해서 YES/NO 처리한다.
Scanner는 한 번만 생성하고 마지막에 .close()로 닫을 것

[입출력 예시]
곡 당 가격 입력: 300
금액 입력 (0 입력 시 종료): 1000
3곡을 부를 수 있으며 잔돈은 100원입니다
음료를 마시고 싶으면 3곡을 부를 수 있으며 잔돈은 0원입니다
음료를 구매하시겠습니까? (YES/NO): YES
음료를 구매하셨습니다.
3곡을 부를 수 있으며 잔돈은 0원입니다
금액 입력 (0 입력 시 종료): 900
3곡을 부를 수 있으며 잔돈은 0원입니다
음료를 마시고 싶으면 2곡을 부를 수 있으며 잔돈은 200원입니다
음료를 구매하시겠습니까? (YES/NO): YES
음료를 구매하셨습니다.
2곡을 부를 수 있으며 잔돈은 200원입니다
금액 입력 (0 입력 시 종료): 900
3곡을 부를 수 있으며 잔돈은 0원입니다
음료를 마시고 싶으면 2곡을 부를 수 있으며 잔돈은 200원입니다
음료를 구매하시겠습니까? (YES/NO): NO
음료를 구매하지 않았습니다.
금액 입력 (0 입력 시 종료): 0

