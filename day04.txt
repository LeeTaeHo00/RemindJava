day04(Java 2일차)
0. 복습

컴퓨터 = 하드웨어 + 운영체제(Os) + 소프트웨어
컴퓨터 언어 : 
	저급언어 : 컴퓨터가 알기 쉬운 언어
	고급언어 : 사람이 알기 쉬운 언어
	
	번역프로그램 : 
		컴파일러 : 통번역, .bin 파일 , JDK 설치할때 설치됨
		인터프리터 : 동시번역

.java 파일 ---javac.exe----> .class ----java.exe----> 실행 결과

이클립스 컴파일러 : 실시간으로 파일을 자동으로 생성 시켜줌

java 프로젝트 -> 패키지 -> 클래스 -> main 메소드

jvm, jre, jdk
JVM(java virtual machine) : 운영체제에 상관없이 java 프로그램 실행, 메모리 배울때 다시 배움
JRE(Java runtime enviroment) : JVM 실행, JVM 실행할떄 필요한 라이브러리 파일등을 가지고 있다.
JDK(Java development kit) : JRE를 포함, 개발에 필요한 도구들을 가지고 있따.

개발할 때는 한글을 사용하지 않는다.

자바 프로그램 동작 원리 : SW -> jVM -> OS -> HW

--------------------------------------------------------------------------

단축키 
	ctrl + n : 프로젝트, 패키지, 클래스 생성
	alt + v, 클래스파일의 {}영역안에서 main + ctrl + space 엔터 : 메인 메소드 생성
	sysout + ctrl + space : 출력 메소드 생성
	ctrl + F11 : 실행 단축키
	ctrl + s : 저장 단축키
	ctrl + alt + 방향키 위, 아래 : 라인 한줄 복사
	alt + 방향키 위, 아래 : 라인 한 줄 이동
	F2 : 파일명, 패키지명, 프로젝트명 변경
	ctrl + shift + f : 자동 정렬

--------------------------------------------------------------------------

용어정리
- 자바프로젝트
	하나의 프로그램 단위
	프로그램을 구성하는 것 들을 모아둔 폴더

- 패키지
	소스파일들의 묶음 단위
	프로젝트의 하위 폴더

- 소스파일
	.java 로 끝나는 파일이며 소스코드가 작성된다.
	이클립스에서는 클래스를 생성하면 자동으로 클래스와 같은 이름으로 소스파일을 만들어준다.

- 클래스
	자바에서 모든 코드는 클래스 내부에서 작성된다.
	클래스 이름은 첫글자가 대문자

- 중괄호{}
	영역을 표시한다.

- 메소드
	이름뒤에 소괄호()가 있는 대부분의 명령어는 메소드
	키워드 뒤에 ()가 있는 것은 메소드가 아니다.(ex : for(){})

- 메인 메소드
	자바프로그램이 실행되면 메인 메소드의 코드가 실행된다.
	프로그램이 시작되는 시작점(entry point)

- 출력 메소드
	System.out.println("문자열");
	콘솔창에 소괄호 안에 있는 값(내용)을 출력

- 콘솔창
	컴퓨터와 개발자가 의사소통하는 창
	개발자가 제대로 된 코드를 작성했는지 확인하기 위해서 사용한다.
	입력과 출력이 가능하다.

- .(닷) or 하위 연산자 : ~~안에 라고 해석

- 세미콜론; 문장의 끝을 표시한다.

- 들여쓰기 : 자바에서는 들여쓰기가 코드에 영향을 끼치지 않는다.
	   가독성을 높이기 위해 사용한다.

- 주석 : 코드에 영향을 끼치지 않는다.
	내가 쓴 코드를 다른 사람에게 설명하기 위한 설명글
	잠시 일부 코드를 제외하고 실행시켜야할 때
	자바 배울 동안은 주석을 통해 코드해석, 로직구성을 필수로 진행한다.
	// 	한줄 주석
	/**/	범위 주석
	/** */ 	API 주석

--------------------------------------------------------------------------

1. 자료형(TYPE) : 값의 종류, 기본이니까 외우자
	자료형 	type 	byte 	값의 의미		예시
	
	정수형	int	4	음양의 정수, 0	2, -15, -5555, 0, ...
		long	8	음양의 정수, 0	2L, -15L, -5555L, 0L, ... 소문자로 쓸수도 있지만 1이랑 구분이 안되서 대문자로 씀

	실수형	double 	8	소수점이 있는 수	3.14, 5.1, -66.34, 0.0, ...
		float	4	소수점이 있는 수	3.14f, 5.1f, -66.34f, 0.0f, ... 
	
	논리형	boolean	1	참, 거짓		true, false

	문자형	char	2	문자 1개('')	'a', 'A', '가', '0', ...
	
	문자열	String	?	문자들의 나열("")	"a", "김영선", "2025년 6월 16일", ...

bit(비트): 	컴퓨터가 처리할 수 있는 최소의 데이터 단위
		0, 1

byte	:	bit 8개를 묶어서 1byte
		
문자	:	작을 따음표로 감싸진 1개의 문자

문자열	: 	문자들의 나열
		큰 따옴표로 감싸진 0개 이상의 문자

--------------------------------------------------------------------------

2. 변수(Variable) : 	어떤 값을 저장하기 위한 저장 공간

1) 특징
	변수는 오직 하나의 자료형만 저장할 수 있따.
	변수는 오직 하나의 값만 저장할 수 있따.

	=> 하나의 자료형과 하나의 값만 저장할 수 있는 저장공간

2) 변수의 선언과 사용
	변수의 선언(만든다)
		자료형 변수명;
		int number;
		boolean isTrue;
		char alpha;

	변수에 값을 저장
		변수명 = 값;
		number = 100;
		isTrue = true;
		alpha = 'a';

		= : 대입연산자, 오른쪽에 있는 값을 왼쪽에 있는 값에 대입/저장 한다.

	변수 선언과 동시에 초기화
		자료형 변수명 = 값;
		int number = 100;

	변수에 저장된 값을 사용하는 방법
		변수명을 이용한다.
	
	여러개의 변수를 선언하는 방법
		자료형 변수명1, 변수명2, 변수명3;
		자료형 벼눗명1 = 값, 변수명2 = 값, 변수명3 = 값;
		단 자료형이 같아야 한다.

3) 변수 선언 시 주의사항
	같은 영역에서(중괄호 안) 같은 이름의 변수를 선언할 수 없다.
	되도록 소스코드 위쪽에 한꺼번에 선언한다.
	되도록 선언과 동시에 초기화를 한다.
	만약 들어갈 값이 아직 정해지지 않았을 경우 기본값을 대입한다.
		정수형 0
		실수형 0.0
		문자열 ""
		문자형 ' '
		논리형 false

4) 변수명 주의사항
	-> 꼭 지키기
	문자부터 시작한다.
	특수기호를 쓸 수 없다(단, _와 $만 가능)
	공백을 사용할 수 없다(카멜표기법, 스네이크 표기법 등을 활용한다_
	키워드(예약어)를 사용할 수 없다.
	
	-> 왠만하면 지키기
	되도록 소문자로 시작한다(대소문자를 구분한다.)
	되도록 의미있는 단어, 문자를 사용한다.
	되도록 한글은 사용하지 않는다.
	

--------------------------------------------------------------------------

3. 상수(constant)
	한번 값이 지정되면 변경할 수 없는 데이터를 의미한다.
	final 키워드를 사용하여 상수를 선언한다.

1) 상수 선언
	자료형 변수명 = 값; : 변수 선언(카멜 표기법)
	final 자료형 상수명 = 값; // 상수 선언
	상수명은 대문자로 작성하고 단어가 바뀔때는 _로 연결한다.(스네이크 표기법)

2) 상수 사용시 주의사항
	- 이름 작성 규칙(변수명)
	- 초기화 필수 : final 이라는 키워드를 사용 시 선언과 동시에 초기화해야한다.
	- 불변성 : 한 번 값이 지정되면 변경할 수 없으므로 값을 유지해야 할 ㄷ떄 주로 사용한다.

--------------------------------------------------------------------------

4. 변수를 사용하는 이유(값을 왜 변수에 저장해서 사용하는가?)
	1) 반복되는 값을 쉽게 관리하기 위해서 (값을 재사용하기 위함)
	2) 값에 의미를 부여하기 위해서(값에 이름 붙힌다.)
	3) 프로그램의 가독성, 유지보수성, 재사용성을 높이기 위해서
	
--------------------------------------------------------------------------

5. 메모리
	java에서는 JVM이 메모리 영역을 할당받아 사용한다.
	변수를 선언했다는 것은 해당 자료형의 크기만큼 메모리를 할당받아 쓸 수 있게 한다.
	--------
	RAM : 
	--------
	Stack
	Heap
	Method
	--------

	RAM
		int num = 10;
		num. 이라는 이름의 저장공간이 RAM에 할당된다.

	

	주고값 
		메모리에 저장공간이 할당되면 고유한 값인 주소값이 부여된다.

	RAM : 작업 도구를 올려두는 책상, 프로그램이 실행되는 동안 데이터를 저장하고 사용하는 공간
	변수 : 책상 위에 상자, 데이터를 저장하기 위해 RAM에 만든 이름이 붙은 공간
	주소값 : 상자의 위치, 컴퓨터가 RAM에서 변수를 찾을 때 사용하는 고유한 번호
	

--------------------------------------------------------------------------

6. 제어 문자(Escape Character / Sequence)
	따음표 안에서 사용되며 미리 예약된 특수한 기능을 하느 ㄴ문자
	\(백슬래쉬, 역슬래쉬)를 사용한다.
	
	문자열 + 정수 혹은 실수 = 연결
	산술 연산 우선순위가 연결보다 빠르다.

--------------------------------------------------------------------------

2. 제어문자, 출력메소드, 서식문자
3. 형변환

--------------------------------------------------------------------------

문자형 변수를 출력할 때는 "" 가 필요함
정수는 필요없음