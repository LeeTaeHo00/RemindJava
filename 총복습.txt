1. 변수 : 하나의 값을 하나의 타입으로 저장하는 저장공간

2. 변수의 종류
	매개변수		stack 메소드(생성자) 선언부 소괄호 안에 쓰는 변수, 메소드(생성자) 중괄호 안에서
	지역변수		stack 메소드(생성자) 구현부에서 사용하는 변수, 메소드 호출시점부터 종료시점까지 / 생성자는 객체 생성할 때 부터 객체 사용되지 않을 때까지
	인스턴스 변수	heap  클래스 중괄호 영역 안에서 사용하는 변수, 객체명.변수명
	스태틱 변수	method, 프로그램 시작부터 끝까지 사용가능, 클래스명.변수명

3. 자료형

기본자료형
	byte, short, int, long, double, float, boolean, char, 	

레퍼런스타입
	String, enum, 클래스명

4. 제어문
	조건문		if, switch
	반복문		for, for-each, while, do~while 구구단 for문 보자
	기타제어문		break, continue

5. 배열 
	저장공간의 나열
	자료형[]배열명 = new 자료형[칸수];
	자료형[]배열 = new 자료형[]{값1, 값2 ....}; new 자료형 부분 생략가능
	자료형[]배열명 = null;

2차원
	자료형[][] 배열명 = new 자료형[행][열];
	자료형[][] 배열명 = {{열1,열2..}, 행1, 행2..}
	자료형[][] 배열명 = null;

길이	배열명.length;
	배열명[index].length;


6. 메소드
- 메소드 선언 메소드 중괄호 영역 밖에서 만든다.
- 메소드 호출 메소드 중괄호 영역 안에서 한다.

1) 인스턴스 메소드 정의
	접근제한자 리턴타입 메소드명(자료형 매개변수){return 리턴값}

2) 메소드 호출방법 4가지
	매개변수 	리턴값 	호출방벙
	x	x	객체명.메소드명();
	o	x	객체명.메소드명(인수);
	x	o	sysout(객체명.메소드명());, 변수명 = 객체명.메소드명();
	o	o	sysout(객체명.메소드명(인수));, 변수명 = 객체명.메소드명(인수);
==========================================================================================
1) 스태틱 메소드 정의
	접근제한자 static 리턴타입 메소드명(자료형 매개변수){return 리턴값}

2) 메소드 호출방법 4가지
	매개변수 	리턴값 	호출방벙
	x	x	클래스명.메소드명();
	o	x	클래스명.메소드명(인수);
	x	o	sysout(클래스명.메소드명());, 변수명 = 클래스명.메소드명();
	o	o	sysout(클래스명.메소드명(인수));, 변수명 = 클래스명.메소드명(인수);
==========================================================================================


7. 클래스
1) 클래스 특징
	사용자 정의 자료형이다
	연관성있는 데이터와 기능을 한 곳에 통합한다.
	객체 생성의 틀

2) 클래스 정의
	접근제한자 class 클래스명
	{
		필드	=> 인스턴스변수, 스택변수, 상수
		메소드	=> 인스턴스 메소드, 스태틱 메소드
		생성자

		public 클래스명() {} -> 기본생성자
		public 클래스명(매개변수1){this.필드 = 매개변수1;}
		public 클래스명(맹개변수1, 매개변수2){this();}
	}

		super() -> 부모클래스, 없을경우 Object 클래스 모든 곳에 들어가있음

		생성자 오버로딩 -> 다른 매개변수로 여러 생성자를 만듬

3) 객체화(인스턴스화)
	클래스타입 참조변수 = new 생성자();
	statck		heap

4) this, this()
	this : 객체 자기자신(참조값)
	this() : 자기 자신의 다른 생성자

=============================================================================================

8. 상속
	기존에 선언된 클래스의 멤버를 새롭게 만든 클래스에서 사용하고 싶을 때 상속을 받고 새로운 기능만 추가한다
	***자바에서 상속은 단일 상속만 가능하다.***
	유지보수, 코드의 재사용성, 확장성

	extends

1) 상속 문법
	class 슈퍼클래스
	{
		필드 -
		메소드 -
		생성자 *오버로딩만 있음
		public 슈퍼클래스(int number)
		{super();
		this.number = byumber	}
	}


	class 서브클래스 extends 슈퍼클래스
	{

		// 서브클래스의 메소드(오버라이딩, 오버로딩)

		public 서브클래스(int number)
		{
			super(number);
			
		}
	}

2) super, super()
	super : 부모의 참조값
	super() : 부모의 생성자



================================================================================================

9. enum 열거형
	고정된 값들을 나타내기 위한 특별한 데이터 유형
	클래스 타입(레퍼런스타입)
1) 사용이유
	코드의 가독성과 안정성을 위해
	컴파일 타임의 오류 방지
	관련 데이터와 동작을 묶을 수 있음

2) enum 문법
	enum Enum명- > 첫문자 대문자
	{
		// 상수
		// 필드
		// 생성자 (접근제한자 = private)
		// 메소드
	}

================================================================================================

10. 다형성 특징
	오버로딩
	오버라이딩

11. 접근 제한자
	public		모든 객체에서 접근가능
	protected	같은 패키지 + 자식 접근가능
	default		같은 패키지 접근 가능
	private		같은 클래스 접근 가능

















































